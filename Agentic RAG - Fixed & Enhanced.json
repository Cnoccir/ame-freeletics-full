{
  "name": "Agentic RAG - Fixed & Enhanced",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "rag-chat",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "cd238f41-0b8b-42eb-bea4-b68ee07ffbbf",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1312,
        48
      ],
      "webhookId": "rag-gold"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful AI assistant with access to a technical document knowledge base.\n\n**Your Capabilities:**\n1. List available documents using the list_documents tool\n2. Search for specific information using the vector_search tool\n3. Get detailed document context using fetch_document_hierarchy and expand_context tools\n\n**Response Guidelines:**\n- For \"what documents\" or \"list\" queries: Use list_documents tool to show available documents with titles and summaries\n- For specific technical questions: Use vector_search first, then expand context if needed\n- Always format responses in clear, readable markdown\n- Cite sources with document names and page numbers when possible\n- If user context is provided (topicId, username), acknowledge it naturally\n\n**Workflow for Technical Questions:**\n1. Call vector_search to find relevant chunks (returns metadata: doc_id, chunk_id, order_index, section_path, parent_range, child_range)\n2. If more context needed, call fetch_document_hierarchy with doc_id\n3. Use expand_context with specific chunk_indexes to get full text\n4. Synthesize answer with proper citations\n\n**Formatting:**\n- Use markdown headers, lists, and code blocks\n- Keep responses concise but comprehensive\n- Use bullet points for lists\n- Bold important terms\n- Include page references when citing sources\n\nRemember: Be conversational and helpful. If you don't know, say so honestly."
        }
      },
      "id": "c8c95e04-31da-44de-bddc-c0416feb0886",
      "name": "OpenAI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        144,
        112
      ]
    },
    {
      "parameters": {
        "options": {
          "temperature": 0.3
        }
      },
      "id": "6d650887-34b8-4800-b3d7-1100eb899c87",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -352,
        368
      ],
      "credentials": {
        "openAiApi": {
          "id": "mgPrUpycCy78WBt2",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "73f2ce04-3e4d-4aa2-a3de-6f6f6a404ba5",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        688,
        544
      ],
      "credentials": {
        "openAiApi": {
          "id": "mgPrUpycCy78WBt2",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract user query and context from chat widget webhook\nconst webhookData = $input.first().json;\nconst body = webhookData.body || webhookData;\nconst headers = webhookData.headers || {};\n\n// Validate required data\nif (!body || !body.query) {\n  throw new Error('Missing required query in webhook body');\n}\n\nconst userQuery = body.query;\n\n// Handle new simple payload format: { query, userId, username }\n// OR old format: { query, context: { user: { id, username }, ... } }\nlet userId, username;\n\nif (body.userId !== undefined) {\n  // New format from chat widget\n  userId = body.userId;\n  username = body.username || 'anonymous';\n} else if (body.context && body.context.user) {\n  // Old format from Discourse\n  userId = body.context.user.id;\n  username = body.context.user.username || 'anonymous';\n} else {\n  // Fallback\n  userId = null;\n  username = 'anonymous';\n}\n\n// Extract IP for rate limiting\nconst userIp = headers['cf-connecting-ip'] || \n                headers['x-real-ip'] || \n                headers['x-forwarded-for']?.split(',')[0] || \n                'unknown';\n\nconst contextInfo = {\n  userId: userId,\n  username: username,\n  userIp: userIp,\n  userAgent: headers['user-agent'] || 'unknown',\n  timestamp: new Date().toISOString(),\n  // Legacy fields for compatibility\n  topicId: body.context?.topicId || null,\n  path: body.context?.path || null,\n  siteUrl: body.context?.siteUrl || null\n};\n\nreturn [{\n  json: {\n    input: userQuery,  // Changed from 'query' to 'input'\n    query: userQuery,  // Keep for logging\n    context: contextInfo\n  }\n}];"
      },
      "id": "03bb2124-7a55-493c-b16b-b3da82e09bf1",
      "name": "Extract User Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        48
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/rest/v1/rpc/check_rate_limit",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  p_user_id: $json.context.userId,\n  p_user_ip: $json.context.userIp,\n  p_user_limit: 50,\n  p_ip_limit: 100,\n  p_window_minutes: 60\n} }}",
        "options": {}
      },
      "id": "1a3b4694-96fa-46c5-9b12-66405744d3c6",
      "name": "Check Rate Limit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        48
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Evaluate Rate Limit Response\nconst rateLimitResponse = $input.first().json;\nconst originalData = $node['Extract User Query'].json;\n\n// Handle array response from RPC\nconst rateLimitResult = Array.isArray(rateLimitResponse) \n  ? rateLimitResponse[0] \n  : rateLimitResponse;\n\n// Check if rate limit is exceeded\nif (!rateLimitResult.allowed) {\n  // Rate limit exceeded\n  return [{\n    json: {\n      error: true,\n      message: `Rate limit exceeded. You have made ${rateLimitResult.user_count} requests in the last ${rateLimitResult.window_minutes} minutes. Limit is ${rateLimitResult.user_limit} requests per hour.`,\n      details: {\n        userCount: rateLimitResult.user_count,\n        userLimit: rateLimitResult.user_limit,\n        ipCount: rateLimitResult.ip_count,\n        ipLimit: rateLimitResult.ip_limit,\n        windowMinutes: rateLimitResult.window_minutes\n      },\n      status: 'rate_limited',\n      logData: {\n        userId: originalData.context.userId,\n        username: originalData.context.username,\n        userIp: originalData.context.userIp,\n        queryText: originalData.query,  // Use .query not .input\n        topicId: originalData.context.topicId,\n        siteUrl: originalData.context.siteUrl,\n        path: originalData.context.path,\n        userAgent: originalData.context.userAgent\n      }\n    }\n  }];\n}\n\n// Rate limit OK\nreturn [{\n  json: {\n    ...originalData,\n    rateLimitPassed: true,\n    rateLimitInfo: rateLimitResult\n  }\n}];"
      },
      "id": "0d0dbf1e-1a53-4333-bd2b-f6e01eb6a138",
      "name": "Evaluate Rate Limit",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        48
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.error }}",
              "value2": true
            }
          ]
        },
        "options": {}
      },
      "id": "3f7d4577-bc0c-4ca9-8eb3-edc874ce9780",
      "name": "IF Rate Limited",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -144,
        96
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/rest/v1/rpc/log_query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  p_user_id: $json.logData.userId,\n  p_username: $json.logData.username,\n  p_user_ip: $json.logData.userIp,\n  p_query_text: $json.logData.queryText,\n  p_topic_id: $json.logData.topicId,\n  p_site_url: $json.logData.siteUrl,\n  p_path: $json.logData.path,\n  p_user_agent: $json.logData.userAgent,\n  p_response_status: 'rate_limited',\n  p_tokens_used: 0\n} }}",
        "options": {}
      },
      "id": "089dca22-0f16-4738-8bb9-affbe7474841",
      "name": "Log Rate Limited Query",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        -80
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { error: $node['Evaluate Rate Limit'].json.error, message: $node['Evaluate Rate Limit'].json.message, details: $node['Evaluate Rate Limit'].json.details } }}",
        "options": {
          "responseCode": 429
        }
      },
      "id": "55c7bd1b-bde6-44c2-9e05-7477411a19ff",
      "name": "Respond Rate Limited",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        528,
        -80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Prepare log data for successful query\nconst agentOutput = $input.first().json;\nconst extractedData = $node['Extract User Query'].json;\n\nreturn [{\n  json: {\n    reply: agentOutput.reply,\n    logData: {\n      p_user_id: extractedData.context.userId,\n      p_username: extractedData.context.username || 'anonymous',\n      p_user_ip: extractedData.context.userIp || 'unknown',\n      p_query_text: extractedData.query,\n      p_topic_id: extractedData.context.topicId,\n      p_site_url: extractedData.context.siteUrl,\n      p_path: extractedData.context.path,\n      p_user_agent: extractedData.context.userAgent,\n      p_response_status: 'success',\n      p_tokens_used: 0\n    }\n  }\n}];"
      },
      "id": "666d33d5-b42f-4ac0-9404-a9f6178b9c2d",
      "name": "Prepare Success Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        736,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/rest/v1/rpc/log_query",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.logData }}",
        "options": {}
      },
      "id": "a9a91ffc-9b9f-49fb-a088-c28d14aac418",
      "name": "Save Query Log",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { reply: $json.reply } }}",
        "options": {}
      },
      "id": "0d001686-2fe3-43f1-bb24-75f0ef8535ec",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1184,
        112
      ]
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "Search the vector store to find relevant document chunks. Use this when the user asks specific technical questions. Returns chunks with metadata: doc_id, chunk_id, order_index, section_path, parent_range, child_range, image_urls. This is your primary search tool for content within documents.",
        "tableName": {
          "__rl": true,
          "value": "rpc/match_documents",
          "mode": "list",
          "cachedResultName": "rpc/match_documents"
        },
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "doc_id",
                "value": "doc_id"
              },
              {
                "name": "chunk_id",
                "value": "chunk_id"
              },
              {
                "name": "order_index",
                "value": "order_index"
              },
              {
                "name": "section_path",
                "value": "section_path"
              },
              {
                "name": "parent_range",
                "value": "parent_range"
              },
              {
                "name": "child_range",
                "value": "child_range"
              },
              {
                "name": "image_urls",
                "value": "image_urls"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        576,
        368
      ],
      "id": "74a01352-2087-48aa-85a4-bb6b92e0f73b",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        16,
        368
      ],
      "id": "ed238857-e4e6-43fc-b903-1343ffef5bd6",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "// Shape agent response for chat widget\nconst agentData = $input.first().json;\n\n// Extract the actual response text from agent output\nconst responseText = String(agentData.output || agentData.text || agentData.result || JSON.stringify(agentData));\n\nconsole.log('Agent Output:', responseText);\n\nreturn [{\n  json: {\n    reply: responseText\n  }\n}];"
      },
      "id": "ada13117-3636-426a-b212-bea41d92435a",
      "name": "Debug Agent Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        528,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/functions/v1/context-expansion",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { doc_id: $json.doc_id, chunk_indexes: $json.chunk_indexes } }}"
      },
      "id": "6e6b17f5-4110-4d73-8d24-26e7765a8e15",
      "name": "Tool Expand Context",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        400,
        368
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/rest/v1/rpc/get_document_hierarchy",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ { p_doc_id: $json.doc_id } }}"
      },
      "id": "e5f66e45-34ca-4188-8752-5fc8fce046ad",
      "name": "Tool Fetch Hierarchy",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        208,
        368
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dwisbglrutplhcotbehy.supabase.co/rest/v1/rpc/list_documents",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={}"
      },
      "id": "00ac152d-0e86-463d-ade4-d27141047612",
      "name": "Tool List Documents",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [
        -176,
        368
      ],
      "credentials": {
        "supabaseApi": {
          "id": "wIbJSxriBymUSxSs",
          "name": "Supabase - Discourse"
        }
      }
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "rnocciolo.app.n8n.cloud",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "content-length": "143",
            "accept": "*/*",
            "accept-encoding": "gzip, br",
            "accept-language": "en-US,en;q=0.9",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "cf-connecting-ip": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b",
            "cf-ew-via": "15",
            "cf-ipcountry": "US",
            "cf-ray": "99041f9437d7381d-EWR",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "n8n.cloud",
            "content-type": "application/json",
            "origin": "https://ame-techassist.com",
            "priority": "u=1, i",
            "referer": "https://ame-techassist.com/",
            "sec-ch-ua": "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"Windows\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b, 104.23.190.200",
            "x-forwarded-host": "rnocciolo.app.n8n.cloud",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "traefik-prod-users-gwc-13-6db466c7ff-ms98z",
            "x-is-trusted": "yes",
            "x-real-ip": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "hello",
            "context": {
              "siteUrl": "https://ame-techassist.com",
              "path": "/",
              "topicId": null,
              "user": {
                "id": 1,
                "username": "raymond",
                "name": null
              }
            }
          },
          "webhookUrl": "https://rnocciolo.app.n8n.cloud/webhook/rag-chat",
          "executionMode": "production"
        }
      }
    ],
    "Extract User Query": [
      {
        "json": {
          "input": "hello",
          "query": "hello",
          "context": {
            "userId": 1,
            "username": "raymond",
            "userIp": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "timestamp": "2025-10-18T01:04:46.037Z",
            "topicId": null,
            "path": "/",
            "siteUrl": "https://ame-techassist.com"
          }
        }
      }
    ],
    "Check Rate Limit": [
      {
        "json": {
          "allowed": true,
          "user_count": 0,
          "ip_count": 0,
          "user_limit": 50,
          "ip_limit": 100,
          "window_minutes": 60,
          "window_start": "2025-10-18T00:04:47.020315+00:00"
        }
      }
    ],
    "Evaluate Rate Limit": [
      {
        "json": {
          "input": "hello",
          "query": "hello",
          "context": {
            "userId": 1,
            "username": "raymond",
            "userIp": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "timestamp": "2025-10-18T01:04:46.037Z",
            "topicId": null,
            "path": "/",
            "siteUrl": "https://ame-techassist.com"
          },
          "rateLimitPassed": true,
          "rateLimitInfo": {
            "allowed": true,
            "user_count": 0,
            "ip_count": 0,
            "user_limit": 50,
            "ip_limit": 100,
            "window_minutes": 60,
            "window_start": "2025-10-18T00:04:47.020315+00:00"
          }
        }
      }
    ],
    "IF Rate Limited": [
      {
        "json": {
          "input": "hello",
          "query": "hello",
          "context": {
            "userId": 1,
            "username": "raymond",
            "userIp": "2601:8c:4b7f:a7d0:f93c:405e:5215:b30b",
            "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36",
            "timestamp": "2025-10-18T01:04:46.037Z",
            "topicId": null,
            "path": "/",
            "siteUrl": "https://ame-techassist.com"
          },
          "rateLimitPassed": true,
          "rateLimitInfo": {
            "allowed": true,
            "user_count": 0,
            "ip_count": 0,
            "user_limit": 50,
            "ip_limit": 100,
            "window_minutes": 60,
            "window_start": "2025-10-18T00:04:47.020315+00:00"
          }
        }
      }
    ],
    "Log Rate Limited Query": [
      {
        "json": {
          "error": "JSON parameter needs to be valid JSON"
        }
      }
    ],
    "Respond Rate Limited": [
      {
        "json": {
          "error": "JSON parameter needs to be valid JSON"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract User Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Agent": {
      "main": [
        [
          {
            "node": "Debug Agent Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Extract User Query": {
      "main": [
        [
          {
            "node": "Check Rate Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Rate Limit": {
      "main": [
        [
          {
            "node": "Evaluate Rate Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Rate Limit": {
      "main": [
        [
          {
            "node": "IF Rate Limited",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Rate Limited": {
      "main": [
        [
          {
            "node": "Log Rate Limited Query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Rate Limited Query": {
      "main": [
        [
          {
            "node": "Respond Rate Limited",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Debug Agent Output": {
      "main": [
        [
          {
            "node": "Prepare Success Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Success Log": {
      "main": [
        [
          {
            "node": "Save Query Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Query Log": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tool Expand Context": {
      "ai_tool": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool Fetch Hierarchy": {
      "ai_tool": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Tool List Documents": {
      "ai_tool": [
        [
          {
            "node": "OpenAI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ab9d07c8-ef13-4e04-8122-21e12d80e195",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7b2e9978814c32d0a3b0dcfec6089a9e22b4a786bbecebb717124ee746c4c60c"
  },
  "id": "OWCTKxiFNY0MIYR5",
  "tags": []
}